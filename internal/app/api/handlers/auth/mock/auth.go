// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/api/handlers/auth/auth.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	presenter "walk_backend/internal/app/api/presenter"
	dto "walk_backend/internal/app/dto"
	model "walk_backend/internal/app/model"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockServiceInterface) GenerateToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockServiceInterfaceMockRecorder) GenerateToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockServiceInterface)(nil).GenerateToken))
}

// Login mocks base method.
func (m *MockServiceInterface) Login(ctx context.Context, dto *dto.AuthLogin) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, dto)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockServiceInterfaceMockRecorder) Login(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockServiceInterface)(nil).Login), ctx, dto)
}

// Registration mocks base method.
func (m *MockServiceInterface) Registration(ctx context.Context, dto *dto.AuthLogin) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", ctx, dto)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Registration indicates an expected call of Registration.
func (mr *MockServiceInterfaceMockRecorder) Registration(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockServiceInterface)(nil).Registration), ctx, dto)
}

// MockTokenPresenterInterface is a mock of TokenPresenterInterface interface.
type MockTokenPresenterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockTokenPresenterInterfaceMockRecorder
}

// MockTokenPresenterInterfaceMockRecorder is the mock recorder for MockTokenPresenterInterface.
type MockTokenPresenterInterfaceMockRecorder struct {
	mock *MockTokenPresenterInterface
}

// NewMockTokenPresenterInterface creates a new mock instance.
func NewMockTokenPresenterInterface(ctrl *gomock.Controller) *MockTokenPresenterInterface {
	mock := &MockTokenPresenterInterface{ctrl: ctrl}
	mock.recorder = &MockTokenPresenterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenPresenterInterface) EXPECT() *MockTokenPresenterInterfaceMockRecorder {
	return m.recorder
}

// Make mocks base method.
func (m *MockTokenPresenterInterface) Make(token string) *presenter.Token {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Make", token)
	ret0, _ := ret[0].(*presenter.Token)
	return ret0
}

// Make indicates an expected call of Make.
func (mr *MockTokenPresenterInterfaceMockRecorder) Make(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Make", reflect.TypeOf((*MockTokenPresenterInterface)(nil).Make), token)
}
