// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/api/handlers/category/category.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	presenter "walk_backend/internal/app/api/presenter"
	dto "walk_backend/internal/app/dto"
	model "walk_backend/internal/app/model"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
)

// MockServiceInterface is a mock of ServiceInterface interface.
type MockServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServiceInterfaceMockRecorder
}

// MockServiceInterfaceMockRecorder is the mock recorder for MockServiceInterface.
type MockServiceInterfaceMockRecorder struct {
	mock *MockServiceInterface
}

// NewMockServiceInterface creates a new mock instance.
func NewMockServiceInterface(ctrl *gomock.Controller) *MockServiceInterface {
	mock := &MockServiceInterface{ctrl: ctrl}
	mock.recorder = &MockServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceInterface) EXPECT() *MockServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockServiceInterface) Create(ctx context.Context, dto *dto.Category) (model.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, dto)
	ret0, _ := ret[0].(model.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceInterfaceMockRecorder) Create(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServiceInterface)(nil).Create), ctx, dto)
}

// Delete mocks base method.
func (m *MockServiceInterface) Delete(ctx context.Context, id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceInterfaceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServiceInterface)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockServiceInterface) Find(ctx context.Context, id model.ID) (*model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockServiceInterfaceMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockServiceInterface)(nil).Find), ctx, id)
}

// ListCategories mocks base method.
func (m *MockServiceInterface) ListCategories(ctx context.Context) (model.CategoryList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories", ctx)
	ret0, _ := ret[0].(model.CategoryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockServiceInterfaceMockRecorder) ListCategories(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockServiceInterface)(nil).ListCategories), ctx)
}

// Update mocks base method.
func (m *MockServiceInterface) Update(ctx context.Context, dto *dto.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockServiceInterfaceMockRecorder) Update(ctx, dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceInterface)(nil).Update), ctx, dto)
}

// MockPresenterInterface is a mock of PresenterInterface interface.
type MockPresenterInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPresenterInterfaceMockRecorder
}

// MockPresenterInterfaceMockRecorder is the mock recorder for MockPresenterInterface.
type MockPresenterInterfaceMockRecorder struct {
	mock *MockPresenterInterface
}

// NewMockPresenterInterface creates a new mock instance.
func NewMockPresenterInterface(ctrl *gomock.Controller) *MockPresenterInterface {
	mock := &MockPresenterInterface{ctrl: ctrl}
	mock.recorder = &MockPresenterInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPresenterInterface) EXPECT() *MockPresenterInterfaceMockRecorder {
	return m.recorder
}

// Make mocks base method.
func (m_2 *MockPresenterInterface) Make(m *model.Category) *presenter.Category {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Make", m)
	ret0, _ := ret[0].(*presenter.Category)
	return ret0
}

// Make indicates an expected call of Make.
func (mr *MockPresenterInterfaceMockRecorder) Make(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Make", reflect.TypeOf((*MockPresenterInterface)(nil).Make), m)
}

// MakeList mocks base method.
func (m *MockPresenterInterface) MakeList(mList model.CategoryList) []*presenter.Category {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeList", mList)
	ret0, _ := ret[0].([]*presenter.Category)
	return ret0
}

// MakeList indicates an expected call of MakeList.
func (mr *MockPresenterInterfaceMockRecorder) MakeList(mList interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeList", reflect.TypeOf((*MockPresenterInterface)(nil).MakeList), mList)
}
