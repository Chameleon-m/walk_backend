// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/repository/place_repository_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	model "walk_backend/internal/app/model"

	gomock "github.com/golang/mock/gomock"
)

// MockPlaceRepositoryInterface is a mock of PlaceRepositoryInterface interface.
type MockPlaceRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceRepositoryInterfaceMockRecorder
}

// MockPlaceRepositoryInterfaceMockRecorder is the mock recorder for MockPlaceRepositoryInterface.
type MockPlaceRepositoryInterfaceMockRecorder struct {
	mock *MockPlaceRepositoryInterface
}

// NewMockPlaceRepositoryInterface creates a new mock instance.
func NewMockPlaceRepositoryInterface(ctrl *gomock.Controller) *MockPlaceRepositoryInterface {
	mock := &MockPlaceRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPlaceRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceRepositoryInterface) EXPECT() *MockPlaceRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockPlaceRepositoryInterface) Create(m *model.Place) (model.ID, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", m)
	ret0, _ := ret[0].(model.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPlaceRepositoryInterfaceMockRecorder) Create(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlaceRepositoryInterface)(nil).Create), m)
}

// Delete mocks base method.
func (m *MockPlaceRepositoryInterface) Delete(id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPlaceRepositoryInterfaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPlaceRepositoryInterface)(nil).Delete), id)
}

// Find mocks base method.
func (m *MockPlaceRepositoryInterface) Find(id model.ID) (*model.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*model.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockPlaceRepositoryInterfaceMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPlaceRepositoryInterface)(nil).Find), id)
}

// FindAll mocks base method.
func (m *MockPlaceRepositoryInterface) FindAll() (model.PlaceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(model.PlaceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPlaceRepositoryInterfaceMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPlaceRepositoryInterface)(nil).FindAll))
}

// Search mocks base method.
func (m *MockPlaceRepositoryInterface) Search(search string) (model.PlaceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", search)
	ret0, _ := ret[0].(model.PlaceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockPlaceRepositoryInterfaceMockRecorder) Search(search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockPlaceRepositoryInterface)(nil).Search), search)
}

// Update mocks base method.
func (m_2 *MockPlaceRepositoryInterface) Update(m *model.Place) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPlaceRepositoryInterfaceMockRecorder) Update(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPlaceRepositoryInterface)(nil).Update), m)
}
