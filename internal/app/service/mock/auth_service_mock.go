// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/auth_service_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	dto "walk_backend/internal/app/dto"
	model "walk_backend/internal/app/model"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthServiceInteface is a mock of AuthServiceInteface interface.
type MockAuthServiceInteface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceIntefaceMockRecorder
}

// MockAuthServiceIntefaceMockRecorder is the mock recorder for MockAuthServiceInteface.
type MockAuthServiceIntefaceMockRecorder struct {
	mock *MockAuthServiceInteface
}

// NewMockAuthServiceInteface creates a new mock instance.
func NewMockAuthServiceInteface(ctrl *gomock.Controller) *MockAuthServiceInteface {
	mock := &MockAuthServiceInteface{ctrl: ctrl}
	mock.recorder = &MockAuthServiceIntefaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceInteface) EXPECT() *MockAuthServiceIntefaceMockRecorder {
	return m.recorder
}

// GenerateToken mocks base method.
func (m *MockAuthServiceInteface) GenerateToken() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthServiceIntefaceMockRecorder) GenerateToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthServiceInteface)(nil).GenerateToken))
}

// Login mocks base method.
func (m *MockAuthServiceInteface) Login(dto *dto.AuthLogin) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", dto)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthServiceIntefaceMockRecorder) Login(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthServiceInteface)(nil).Login), dto)
}

// Registration mocks base method.
func (m *MockAuthServiceInteface) Registration(dto *dto.AuthLogin) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Registration", dto)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Registration indicates an expected call of Registration.
func (mr *MockAuthServiceIntefaceMockRecorder) Registration(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Registration", reflect.TypeOf((*MockAuthServiceInteface)(nil).Registration), dto)
}
