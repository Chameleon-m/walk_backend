// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/category_service_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	dto "walk_backend/internal/app/dto"
	model "walk_backend/internal/app/model"

	gomock "github.com/golang/mock/gomock"
)

// MockCategoryServiceInteface is a mock of CategoryServiceInteface interface.
type MockCategoryServiceInteface struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryServiceIntefaceMockRecorder
}

// MockCategoryServiceIntefaceMockRecorder is the mock recorder for MockCategoryServiceInteface.
type MockCategoryServiceIntefaceMockRecorder struct {
	mock *MockCategoryServiceInteface
}

// NewMockCategoryServiceInteface creates a new mock instance.
func NewMockCategoryServiceInteface(ctrl *gomock.Controller) *MockCategoryServiceInteface {
	mock := &MockCategoryServiceInteface{ctrl: ctrl}
	mock.recorder = &MockCategoryServiceIntefaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryServiceInteface) EXPECT() *MockCategoryServiceIntefaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategoryServiceInteface) Create(dto *dto.Category) (model.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", dto)
	ret0, _ := ret[0].(model.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCategoryServiceIntefaceMockRecorder) Create(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategoryServiceInteface)(nil).Create), dto)
}

// Delete mocks base method.
func (m *MockCategoryServiceInteface) Delete(id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCategoryServiceIntefaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategoryServiceInteface)(nil).Delete), id)
}

// Find mocks base method.
func (m *MockCategoryServiceInteface) Find(id model.ID) (*model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockCategoryServiceIntefaceMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockCategoryServiceInteface)(nil).Find), id)
}

// ListCategories mocks base method.
func (m *MockCategoryServiceInteface) ListCategories() (model.CategoryList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories")
	ret0, _ := ret[0].(model.CategoryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockCategoryServiceIntefaceMockRecorder) ListCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockCategoryServiceInteface)(nil).ListCategories))
}

// Update mocks base method.
func (m *MockCategoryServiceInteface) Update(dto *dto.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCategoryServiceIntefaceMockRecorder) Update(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCategoryServiceInteface)(nil).Update), dto)
}
