// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/place_service_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	dto "walk_backend/internal/app/dto"
	model "walk_backend/internal/app/model"

	gomock "github.com/golang/mock/gomock"
)

// MockPlaceServiceInteface is a mock of PlaceServiceInteface interface.
type MockPlaceServiceInteface struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceServiceIntefaceMockRecorder
}

// MockPlaceServiceIntefaceMockRecorder is the mock recorder for MockPlaceServiceInteface.
type MockPlaceServiceIntefaceMockRecorder struct {
	mock *MockPlaceServiceInteface
}

// NewMockPlaceServiceInteface creates a new mock instance.
func NewMockPlaceServiceInteface(ctrl *gomock.Controller) *MockPlaceServiceInteface {
	mock := &MockPlaceServiceInteface{ctrl: ctrl}
	mock.recorder = &MockPlaceServiceIntefaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceServiceInteface) EXPECT() *MockPlaceServiceIntefaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPlaceServiceInteface) Create(dto *dto.Place) (model.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", dto)
	ret0, _ := ret[0].(model.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPlaceServiceIntefaceMockRecorder) Create(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlaceServiceInteface)(nil).Create), dto)
}

// Delete mocks base method.
func (m *MockPlaceServiceInteface) Delete(id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPlaceServiceIntefaceMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPlaceServiceInteface)(nil).Delete), id)
}

// Find mocks base method.
func (m *MockPlaceServiceInteface) Find(id model.ID) (*model.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*model.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockPlaceServiceIntefaceMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPlaceServiceInteface)(nil).Find), id)
}

// FindCategory mocks base method.
func (m *MockPlaceServiceInteface) FindCategory(id model.ID) (*model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCategory", id)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCategory indicates an expected call of FindCategory.
func (mr *MockPlaceServiceIntefaceMockRecorder) FindCategory(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCategory", reflect.TypeOf((*MockPlaceServiceInteface)(nil).FindCategory), id)
}

// ListCategories mocks base method.
func (m *MockPlaceServiceInteface) ListCategories() (model.CategoryList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCategories")
	ret0, _ := ret[0].(model.CategoryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCategories indicates an expected call of ListCategories.
func (mr *MockPlaceServiceIntefaceMockRecorder) ListCategories() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCategories", reflect.TypeOf((*MockPlaceServiceInteface)(nil).ListCategories))
}

// ListPlaces mocks base method.
func (m *MockPlaceServiceInteface) ListPlaces() (model.PlaceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlaces")
	ret0, _ := ret[0].(model.PlaceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlaces indicates an expected call of ListPlaces.
func (mr *MockPlaceServiceIntefaceMockRecorder) ListPlaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlaces", reflect.TypeOf((*MockPlaceServiceInteface)(nil).ListPlaces))
}

// Search mocks base method.
func (m *MockPlaceServiceInteface) Search(search string) (model.PlaceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", search)
	ret0, _ := ret[0].(model.PlaceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockPlaceServiceIntefaceMockRecorder) Search(search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockPlaceServiceInteface)(nil).Search), search)
}

// Update mocks base method.
func (m *MockPlaceServiceInteface) Update(dto *dto.Place) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", dto)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPlaceServiceIntefaceMockRecorder) Update(dto interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPlaceServiceInteface)(nil).Update), dto)
}
