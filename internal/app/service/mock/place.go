// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/service/place.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"
	time "time"
	model "walk_backend/internal/app/model"

	gomock "github.com/golang/mock/gomock"
)

// MockPlaceRepositoryInterface is a mock of PlaceRepositoryInterface interface.
type MockPlaceRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceRepositoryInterfaceMockRecorder
}

// MockPlaceRepositoryInterfaceMockRecorder is the mock recorder for MockPlaceRepositoryInterface.
type MockPlaceRepositoryInterfaceMockRecorder struct {
	mock *MockPlaceRepositoryInterface
}

// NewMockPlaceRepositoryInterface creates a new mock instance.
func NewMockPlaceRepositoryInterface(ctrl *gomock.Controller) *MockPlaceRepositoryInterface {
	mock := &MockPlaceRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPlaceRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceRepositoryInterface) EXPECT() *MockPlaceRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m_2 *MockPlaceRepositoryInterface) Create(ctx context.Context, m *model.Place) (model.ID, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Create", ctx, m)
	ret0, _ := ret[0].(model.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPlaceRepositoryInterfaceMockRecorder) Create(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPlaceRepositoryInterface)(nil).Create), ctx, m)
}

// Delete mocks base method.
func (m *MockPlaceRepositoryInterface) Delete(ctx context.Context, id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPlaceRepositoryInterfaceMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPlaceRepositoryInterface)(nil).Delete), ctx, id)
}

// Find mocks base method.
func (m *MockPlaceRepositoryInterface) Find(ctx context.Context, id model.ID) (*model.Place, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*model.Place)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockPlaceRepositoryInterfaceMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPlaceRepositoryInterface)(nil).Find), ctx, id)
}

// FindAll mocks base method.
func (m *MockPlaceRepositoryInterface) FindAll(ctx context.Context) (model.PlaceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].(model.PlaceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPlaceRepositoryInterfaceMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPlaceRepositoryInterface)(nil).FindAll), ctx)
}

// Search mocks base method.
func (m *MockPlaceRepositoryInterface) Search(ctx context.Context, search string) (model.PlaceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, search)
	ret0, _ := ret[0].(model.PlaceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockPlaceRepositoryInterfaceMockRecorder) Search(ctx, search interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockPlaceRepositoryInterface)(nil).Search), ctx, search)
}

// Update mocks base method.
func (m_2 *MockPlaceRepositoryInterface) Update(ctx context.Context, m *model.Place) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "Update", ctx, m)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockPlaceRepositoryInterfaceMockRecorder) Update(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPlaceRepositoryInterface)(nil).Update), ctx, m)
}

// MockPlaceCategoryRepositoryInterface is a mock of PlaceCategoryRepositoryInterface interface.
type MockPlaceCategoryRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceCategoryRepositoryInterfaceMockRecorder
}

// MockPlaceCategoryRepositoryInterfaceMockRecorder is the mock recorder for MockPlaceCategoryRepositoryInterface.
type MockPlaceCategoryRepositoryInterfaceMockRecorder struct {
	mock *MockPlaceCategoryRepositoryInterface
}

// NewMockPlaceCategoryRepositoryInterface creates a new mock instance.
func NewMockPlaceCategoryRepositoryInterface(ctrl *gomock.Controller) *MockPlaceCategoryRepositoryInterface {
	mock := &MockPlaceCategoryRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPlaceCategoryRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceCategoryRepositoryInterface) EXPECT() *MockPlaceCategoryRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockPlaceCategoryRepositoryInterface) Find(ctx context.Context, id model.ID) (*model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, id)
	ret0, _ := ret[0].(*model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockPlaceCategoryRepositoryInterfaceMockRecorder) Find(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPlaceCategoryRepositoryInterface)(nil).Find), ctx, id)
}

// FindAll mocks base method.
func (m *MockPlaceCategoryRepositoryInterface) FindAll(ctx context.Context) (model.CategoryList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", ctx)
	ret0, _ := ret[0].(model.CategoryList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockPlaceCategoryRepositoryInterfaceMockRecorder) FindAll(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockPlaceCategoryRepositoryInterface)(nil).FindAll), ctx)
}

// MockPlaceQueueRepositoryInterface is a mock of PlaceQueueRepositoryInterface interface.
type MockPlaceQueueRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceQueueRepositoryInterfaceMockRecorder
}

// MockPlaceQueueRepositoryInterfaceMockRecorder is the mock recorder for MockPlaceQueueRepositoryInterface.
type MockPlaceQueueRepositoryInterfaceMockRecorder struct {
	mock *MockPlaceQueueRepositoryInterface
}

// NewMockPlaceQueueRepositoryInterface creates a new mock instance.
func NewMockPlaceQueueRepositoryInterface(ctrl *gomock.Controller) *MockPlaceQueueRepositoryInterface {
	mock := &MockPlaceQueueRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPlaceQueueRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceQueueRepositoryInterface) EXPECT() *MockPlaceQueueRepositoryInterfaceMockRecorder {
	return m.recorder
}

// PublishReIndex mocks base method.
func (m *MockPlaceQueueRepositoryInterface) PublishReIndex(id model.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishReIndex", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishReIndex indicates an expected call of PublishReIndex.
func (mr *MockPlaceQueueRepositoryInterfaceMockRecorder) PublishReIndex(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishReIndex", reflect.TypeOf((*MockPlaceQueueRepositoryInterface)(nil).PublishReIndex), id)
}

// MockPlaceCacheRepositoryInterface is a mock of PlaceCacheRepositoryInterface interface.
type MockPlaceCacheRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPlaceCacheRepositoryInterfaceMockRecorder
}

// MockPlaceCacheRepositoryInterfaceMockRecorder is the mock recorder for MockPlaceCacheRepositoryInterface.
type MockPlaceCacheRepositoryInterfaceMockRecorder struct {
	mock *MockPlaceCacheRepositoryInterface
}

// NewMockPlaceCacheRepositoryInterface creates a new mock instance.
func NewMockPlaceCacheRepositoryInterface(ctrl *gomock.Controller) *MockPlaceCacheRepositoryInterface {
	mock := &MockPlaceCacheRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockPlaceCacheRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlaceCacheRepositoryInterface) EXPECT() *MockPlaceCacheRepositoryInterfaceMockRecorder {
	return m.recorder
}

// Del mocks base method.
func (m *MockPlaceCacheRepositoryInterface) Del(ctx context.Context, keys ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range keys {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Del", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockPlaceCacheRepositoryInterfaceMockRecorder) Del(ctx interface{}, keys ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, keys...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockPlaceCacheRepositoryInterface)(nil).Del), varargs...)
}

// Get mocks base method.
func (m *MockPlaceCacheRepositoryInterface) Get(ctx context.Context, key string) (model.PlaceList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(model.PlaceList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPlaceCacheRepositoryInterfaceMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPlaceCacheRepositoryInterface)(nil).Get), ctx, key)
}

// Set mocks base method.
func (m *MockPlaceCacheRepositoryInterface) Set(ctx context.Context, key string, value model.PlaceList, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockPlaceCacheRepositoryInterfaceMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockPlaceCacheRepositoryInterface)(nil).Set), ctx, key, value, expiration)
}
