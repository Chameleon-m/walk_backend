version: '3.9'

services:

  nginx:
    container_name: nginx
    image: 'nginx:1.23.3'
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl-params.conf:/etc/nginx/ssl-params.conf:ro
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/keys/cert.crt:/etc/ssl/certs/nginx-selfsigned.crt
      - ./nginx/keys/cert.key:/etc/ssl/private/nginx-selfsigned.key
      - ./nginx/keys/dhparam.pem:/etc/nginx/dhparam.pem
    networks:
      - netNginx

  rabbitmq:
    container_name: rabbitmq
    image: 'rabbitmq:3-management'
    ports:
     - 15672:15672
     - 15692:15692
     - 5672:5672
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER:-guest}
      RABBITMQ_DEFAULT_PASSWORD: ${RABBITMQ_DEFAULT_PASS:-guest}
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 5s
      timeout: 10s
      retries: 1
      start_period: 5s
    networks:
      - netApplication
    volumes:
      - ./rabbitmq/conf.d/:/etc/rabbitmq/conf.d/
      - rabbitmqData:/var/lib/rabbitmq/

  mongo-replica-setup:
    container_name: mongo-setup
    image: 'mongo:6.0.3'
    networks:
      - netApplication
    volumes:
      - ./mongodb/scripts/mongosetup.sh:/scripts/mongosetup.sh
    entrypoint: [ "bash", "/scripts/mongosetup.sh" ]
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_REPLICA_SET_NAME: ${MONGO_REPLICA_SET_NAME}

  mongo1:
    container_name: 'mongo1'
    image: 'mongo:6.0.3'
    command:
      [
        "--config",
        "/etc/mongod.conf",
        "--keyFile",
        "/auth/file.key",
        "--replSet",
        "${MONGO_REPLICA_SET_NAME}",
        "--bind_ip_all",
        "--auth"
      ]
    ports:
      - 27017:27017
    networks:
      - netApplication
    volumes:
      - mongoData:/data/db
      - mongoConfig:/data/configdb
      - ./mongodb/mongod.conf:/etc/mongod.conf
      - ./mongodb/file.key:/auth/file.key
      - ./mongodb/docker-entrypoint-initdb.d/usercreate.sh:/docker-entrypoint-initdb.d/usercreate.sh
      - ./mongodb/docker-entrypoint-initdb.d/authkey.sh:/docker-entrypoint-initdb.d/authkey.sh
    healthcheck:
      test: echo 'db.runCommand({serverStatus:1}).ok' | mongosh admin -u $${MONGO_INITDB_ROOT_USERNAME} -p $${MONGO_INITDB_ROOT_PASSWORD} --quiet | grep 1
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_NAME: ${MONGO_INITDB_NAME}
      MONGO_INITDB_USERNAME: ${MONGO_INITDB_USERNAME}
      MONGO_INITDB_PASSWORD: ${MONGO_INITDB_PASSWORD}
      MONGO_REPLICA_SET_NAME: ${MONGO_REPLICA_SET_NAME}

  redis:
    container_name: 'redis'
    image: 'redis:7.0.8'
    ports:
      - 6379:6379
    volumes:
      - redisData:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
      - ./redis/users.acl:/usr/local/etc/redis/users.acl
    healthcheck:
      test: redis-cli -h ${REDIS_HOST:-127.0.0.1} -p ${REDIS_PORT:-6379} --user ${REDIS_USERNAME} --pass ${REDIS_PASSWORD} PING | grep PONG
      interval: 3s
      timeout: 3s
      retries: 3
    command: redis-server /usr/local/etc/redis/redis.conf --loglevel ${REDIS_LOG_LEVEL:-debug}
    networks:
      - netApplication

  prometheus:
    container_name: 'prometheus'
    image: 'prom/prometheus:v2.41.0'
    volumes:
      - prometheusData:/prometheus
    #   - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - 9090:9090
    networks:
      - netApplication

  telegraf:
    container_name: 'telegraf'
    image: 'telegraf:1.25.0'
    volumes:
      - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf
    ports:
      - 9100:9100
    networks:
      - netApplication

  grafana:
    container_name: 'grafana'
    image: 'grafana/grafana:9.3.2'
    volumes:
      - grafanaData:/var/lib/grafana
      - ./grafana/conf/defaults.ini:/usr/share/grafana/conf/defaults.ini
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/alerting:/etc/grafana/provisioning/alerting
    ports:
      - 3000:3000
    networks:
      - netApplication

  logstash:
    container_name: 'logstash'
    image: 'logstash:8.5.3'
    volumes:
      - logstashData:/usr/share/logstash/data
      - ./logstash/config/jvm.options:/usr/share/logstash/config/jvm.options:ro
      - ./logstash/config/log4j2.properties:/usr/share/logstash/config/log4j2.properties:ro
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logstash/config/pipelines.yml:/usr/share/logstash/config/pipelines.yml:ro
      - ./logstash/config/startup.options:/usr/share/logstash/config/startup.options:ro
    networks:
      - netApplication
    ports:
      - "5000:5000"
      - "12201:12201"
      - "12201:12201/udp"

  elasticsearch:
    container_name: 'elasticsearch'
    image: 'elasticsearch:8.5.3'
    ports:
      - 9200:9200
    networks:
      - netApplication
    volumes:
      - elasticsearchData:/usr/share/elasticsearch/data
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
      - ./elasticsearch/config/jvm.options:/usr/share/elasticsearch/config/jvm.options:ro
      - ./elasticsearch/config/log4j2.properties:/usr/share/elasticsearch/config/log4j2.properties:ro
    healthcheck:
      test: ["CMD-SHELL", "curl http://localhost:9200/_cluster/health?pretty"]
      interval: 30s
      timeout: 30s
      retries: 3

  kibana:
    container_name: 'kibana'
    image: 'kibana:8.5.3'
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_HOSTS: ${ELASTICSEARCH_HOSTS}
    networks:
      - netApplication
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro
      - ./kibana/config/node.options:/usr/share/kibana/config/node.options:ro

  filebeat:
    container_name: 'filebeat'
    image: docker.elastic.co/beats/filebeat:8.5.3
    volumes:
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - filebeatData:/usr/share/filebeat/data
    entrypoint: "filebeat -e -strict.perms=false -c /usr/share/filebeat/filebeat.yml"
    environment:
      OUTPUT_ELASTICSEARCH_HOSTS: ${ELASTICSEARCH_HOSTS}
      KIBANA_HOST: ${KIBANA_HOST}
      APP_VERSION: ${APP_VERSION}
      REDIS_HOST: ${REDIS_HOST}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ''
    networks:
      - netApplication

volumes:
  mongoData:
  mongoLogs:
  mongoConfig:
  rabbitmqData:
  grafanaData:
  elasticsearchData:
  logstashData:
  redisData:
  redisLogs:
  filebeatData:
  filebeatLogs:
  apiLogs:
  nginxLogs:
  kibanaLogs:
  prometheusData:
  
networks:
  netApplication:
    name: netApplication
  netNginx:
    name: netNginx
